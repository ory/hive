// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryAddress recovery address
//
// swagger:model RecoveryAddress
type RecoveryAddress struct {

	// expires at
	// Required: true
	// Format: date-time
	ExpiresAt *strfmt.DateTime `json:"expires_at"`

	// id
	// Required: true
	// Format: uuid4
	ID UUID `json:"id"`

	// recovered
	// Required: true
	Recovered *bool `json:"recovered"`

	// recovered at
	// Format: date-time
	RecoveredAt strfmt.DateTime `json:"recovered_at,omitempty"`

	// value
	// Required: true
	Value *string `json:"value"`

	// via
	// Required: true
	Via RecoveryAddressType `json:"via"`
}

// Validate validates this recovery address
func (m *RecoveryAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecovered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVia(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoveryAddress) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expires_at", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryAddress) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *RecoveryAddress) validateRecovered(formats strfmt.Registry) error {

	if err := validate.Required("recovered", "body", m.Recovered); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryAddress) validateRecoveredAt(formats strfmt.Registry) error {

	if swag.IsZero(m.RecoveredAt) { // not required
		return nil
	}

	if err := validate.FormatOf("recovered_at", "body", "date-time", m.RecoveredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryAddress) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

func (m *RecoveryAddress) validateVia(formats strfmt.Registry) error {

	if err := m.Via.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("via")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryAddress) UnmarshalBinary(b []byte) error {
	var res RecoveryAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
