package selfservice

import (
	"net/http"
	"net/url"

	"github.com/julienschmidt/httprouter"
	"github.com/pkg/errors"

	"github.com/ory/x/urlx"

	"github.com/ory/hive/driver/configuration"
	"github.com/ory/hive/errorx"
	"github.com/ory/hive/session"
	"github.com/ory/hive/x"
)

const (
	BrowserLoginPath         = "/auth/browser/login"
	BrowserLoginRequestsPath = "/auth/browser/requests/login"
)

type loginHandlerDependencies interface {
	LoginStrategyProvider
	LoginExecutionProvider
	session.ManagementProvider
	errorx.ManagementProvider
	LoginRequestManagementProvider
	x.WriterProvider
}

type LoginHandler struct {
	c configuration.Provider
	d loginHandlerDependencies
}

type LoginHandlerProvider interface {
	LoginHandler() *LoginHandler
}

func NewLoginHandler(d loginHandlerDependencies, c configuration.Provider) *LoginHandler {
	return &LoginHandler{d: d, c: c}
}

func (h *LoginHandler) RegisterPublicRoutes(public *x.RouterPublic) {
	public.GET(BrowserLoginPath, h.initLoginRequest)
	public.GET(BrowserLoginRequestsPath, h.fetchLoginRequest)
}

func (h *LoginHandler) NewLoginRequest(w http.ResponseWriter, r *http.Request, redir func(request *LoginRequest) string) error {
	a := NewLoginRequest(h.c.SelfServiceLoginRequestLifespan())
	for _, s := range h.d.LoginStrategies() {
		if err := s.PopulateLoginMethod(r, a); err != nil {
			return err
		}
	}

	if err := h.d.LoginExecutor().PreLoginHook(w, r, a); err != nil {
		if errors.Cause(err) == ErrBreak {
			return nil
		}
		return err
	}

	if err := h.d.LoginRequestManager().CreateLoginRequest(r.Context(), a); err != nil {
		return err
	}

	http.Redirect(w,
		r,
		redir(a),
		http.StatusFound,
	)

	return nil
}

func (h *LoginHandler) initLoginRequest(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	if err := h.NewLoginRequest(w, r, func(a *LoginRequest) string {
		return urlx.CopyWithQuery(h.c.LoginURL(), url.Values{"request": {a.ID}}).String()
	}); err != nil {
		h.d.ErrorManager().ForwardError(w, r, err)
		return
	}
}

func (h *LoginHandler) fetchLoginRequest(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ar, err := h.d.LoginRequestManager().GetLoginRequest(r.Context(), r.URL.Query().Get("request"))
	if err != nil {
		h.d.Writer().WriteError(w, r, err)
		return
	}

	h.d.Writer().Write(w, r, ar)
}
