package selfservice

import (
	"net/http"
	"net/url"

	"github.com/julienschmidt/httprouter"
	"github.com/pkg/errors"

	"github.com/ory/x/urlx"

	"github.com/ory/hive-cloud/hive/driver/configuration"
	"github.com/ory/hive-cloud/hive/errorx"
	"github.com/ory/hive-cloud/hive/session"
	"github.com/ory/hive-cloud/hive/x"
)

const (
	BrowserRegistrationPath         = "/auth/browser/registration"
	BrowserRegistrationRequestsPath = "/auth/browser/requests/registration"
)

type registrationHandlerDependencies interface {
	RegistrationStrategyProvider
	RegistrationExecutionProvider
	session.ManagementProvider
	errorx.ManagementProvider
	RegistrationRequestManagementProvider
	x.WriterProvider
}

type RegistrationHandlerProvider interface {
	RegistrationHandler() *RegistrationHandler
}

type RegistrationHandler struct {
	c configuration.Provider
	d registrationHandlerDependencies
}

func NewRegistrationHandler(d registrationHandlerDependencies, c configuration.Provider) *RegistrationHandler {
	return &RegistrationHandler{d: d, c: c}
}

func (h *RegistrationHandler) RegisterPublicRoutes(public *x.RouterPublic) {
	public.GET(BrowserRegistrationPath, h.initRegistrationRequest)
	public.GET(BrowserRegistrationRequestsPath, h.fetchRegistrationRequest)
	for _, s := range h.d.RegistrationStrategies() {
		s.SetRegistrationRoutes(public)
	}
}

func (h *RegistrationHandler) NewRegistrationRequest(w http.ResponseWriter, r *http.Request, redir func(*RegistrationRequest) string) error {
	returnTo, err := x.DetermineReturnToURL(r, h.c.SignupDefaultReturnToURL(), h.c.WhitelistedReturnToDomains())
	if err != nil {
		return err
	}

	a := NewRegistrationRequest(returnTo, h.c.SelfServiceRegistrationRequestLifespan())
	for _, s := range h.d.RegistrationStrategies() {
		if err := s.PopulateRegistrationMethod(r, a); err != nil {
			return err
		}
	}

	if err := h.d.RegistrationExecutor().PreRegistrationHook(w, r, a); err != nil {
		if errors.Cause(err) == ErrBreak {
			return nil
		}
		return err
	}

	if err := h.d.RegistrationRequestManager().CreateRegistrationRequest(r.Context(), a); err != nil {
		return err
	}

	http.Redirect(w,
		r,
		redir(a),
		http.StatusFound,
	)

	return nil
}

func (h *RegistrationHandler) initRegistrationRequest(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	if err := h.NewRegistrationRequest(w, r, func(a *RegistrationRequest) string {
		return urlx.CopyWithQuery(h.c.RegisterURL(), url.Values{"request": {a.ID}}).String()
	}); err != nil {
		h.d.ErrorManager().ForwardError(w, r, err)
		return
	}
}

func (h *RegistrationHandler) fetchRegistrationRequest(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ar, err := h.d.RegistrationRequestManager().GetRegistrationRequest(r.Context(), r.URL.Query().Get("request"))
	if err != nil {
		h.d.Writer().WriteError(w, r, err)
		return
	}

	h.d.Writer().Write(w, r, ar)
}
