{"remainingRequest":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/foobar/go/src/github.com/ory/kratos/docs/docs/self-service/workflows/jobs/after.md","dependencies":[{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/docs/self-service/workflows/jobs/after.md","mtime":1586512083168},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-self-service-workflows-jobs-after-md-4b3.json","mtime":1586597735470},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2Zvb2Jhci9nby9zcmMvZ2l0aHViLmNvbS9vcnkva3JhdG9zL2RvY3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXtpZDonYWZ0ZXInLHRpdGxlOidBZnRlciBKb2JzJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsiaWQiOiJzZWxmLXNlcnZpY2Uvd29ya2Zsb3dzL2pvYnMvYWZ0ZXIiLCJ0aXRsZSI6IkFmdGVyIEpvYnMiLCJkZXNjcmlwdGlvbiI6IiMjIFVzZXIgTG9naW4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL3NlbGYtc2VydmljZS93b3JrZmxvd3Mvam9icy9hZnRlci5tZCIsInBlcm1hbGluayI6Ii9rcmF0b3MvZG9jcy9uZXh0L3NlbGYtc2VydmljZS93b3JrZmxvd3Mvam9icy9hZnRlciIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vb3J5L2tyYXRvcy9lZGl0L21hc3Rlci9kb2NzL2RvY3Mvc2VsZi1zZXJ2aWNlL3dvcmtmbG93cy9qb2JzL2FmdGVyLm1kIiwidmVyc2lvbiI6Im5leHQiLCJsYXN0VXBkYXRlZEJ5IjoiaGFja2VybWFuIiwibGFzdFVwZGF0ZWRBdCI6MTU4NjE3NzE2Miwic2lkZWJhciI6ImRvY3MiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkJlZm9yZSBKb2JzIiwicGVybWFsaW5rIjoiL2tyYXRvcy9kb2NzL25leHQvc2VsZi1zZXJ2aWNlL3dvcmtmbG93cy9qb2JzL2JlZm9yZSJ9LCJuZXh0Ijp7InRpdGxlIjoiQ29uZmlndXJhdGlvbiIsInBlcm1hbGluayI6Ii9rcmF0b3MvZG9jcy9uZXh0L3JlZmVyZW5jZS9jb25maWd1cmF0aW9uIn19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J1VzZXIgTG9naW4nLGlkOid1c2VyLWxvZ2luJyxjaGlsZHJlbjpbe3ZhbHVlOic8Y29kZT5zZXNzaW9uPC9jb2RlPicsaWQ6J3Nlc3Npb24nLGNoaWxkcmVuOltdfSx7dmFsdWU6Jzxjb2RlPnJlZGlyZWN0PC9jb2RlPicsaWQ6J3JlZGlyZWN0JyxjaGlsZHJlbjpbXX0se3ZhbHVlOic8Y29kZT5yZXZva2VfYWN0aXZlX3Nlc3Npb25zPC9jb2RlPicsaWQ6J3Jldm9rZV9hY3RpdmVfc2Vzc2lvbnMnLGNoaWxkcmVuOltdfV19LHt2YWx1ZTonVXNlciBSZWdpc3RyYXRpb24nLGlkOid1c2VyLXJlZ2lzdHJhdGlvbicsY2hpbGRyZW46W3t2YWx1ZTonPGNvZGU+c2Vzc2lvbjwvY29kZT4nLGlkOidzZXNzaW9uLTEnLGNoaWxkcmVuOltdfSx7dmFsdWU6Jzxjb2RlPnJlZGlyZWN0PC9jb2RlPicsaWQ6J3JlZGlyZWN0LTEnLGNoaWxkcmVuOltdfV19XTtjb25zdCBtYWtlU2hvcnRjb2RlPW5hbWU9PmZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMiIseyJpZCI6InVzZXItbG9naW4ifSxgVXNlciBMb2dpbmApLG1keCgicCIsbnVsbCxgSm9icyBydW5uaW5nIGFmdGVyIHN1Y2Nlc3NmdWwgdXNlciBhdXRoZW50aWNhdGlvbiBjYW4gYmUgZGVmaW5lZCBwZXIKU2VsZi1TZXJ2aWNlIExvZ2luIFN0cmF0ZWd5IGluIE9SWSBLcmF0b3MnIGNvbmZpZ3VyYXRpb24gZmlsZSwgZm9yIGV4YW1wbGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLGBzZWxmc2VydmljZToKICBsb2dpbjoKICAgIGFmdGVyOgogICAgICBwYXNzd29yZGxlc3M6CiAgICAgICAgLSBqb2I6IHJlZGlyZWN0CiAgICAgICAgICBjb25maWc6CiAgICAgICAgICAgIHJlZGlyZWN0X3RvOiBodHRwczovL3VybC10by1yZWRpcmVjdC90bwogICAgICBvaWRjOgogICAgICAgIC0gam9iOiByZWRpcmVjdAogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICByZWRpcmVjdF90bzogaHR0cHM6Ly91cmwtdG8tcmVkaXJlY3QvdG8KICAgICAgcGFzc3dvcmQ6CiAgICAgICAgLSBqb2I6IHJlZGlyZWN0CiAgICAgICAgICBjb25maWc6CiAgICAgICAgICAgIHJlZGlyZWN0X3RvOiBodHRwczovL3VybC10by1yZWRpcmVjdC90bwpgKSksbWR4KCJoMyIseyJpZCI6InNlc3Npb24ifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJoMyJ9LGBzZXNzaW9uYCkpLG1keCgicCIsbnVsbCxgVGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBzZXNzaW9uYCksYCBqb2Igd2lsbCBzZW5kIGEgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFNldC1Db29raWVgKSxgIGhlYWRlciB3aGljaCBjb250YWlucyB0aGUgc2Vzc2lvbgpjb29raWUuIFRvIHVzZSBpdCwgeW91IG11c3QgZmlyc3QgZGVmaW5lIG9uZSBvciBtb3JlIChmb3Igc2VjcmV0IHJvdGF0aW9uKQpzZXNzaW9uIHNlY3JldHMgYW5kIHRoZW4gdXNlIGl0IGluIG9uZSBvZiB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGFmdGVyYCksYCB3b3JrIGZsb3dzOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSxgc2VjcmV0czoKICBzZXNzaW9uOgogICAgLSBzb21ldGhpbmctc3VwZXItc2VjcmV0ICMgVGhlIGZpcnN0IGVudHJ5IHdpbGwgYmUgdXNlZCB0byBzaWduIGFuZCB2ZXJpZnkgc2Vzc2lvbiBjb29raWVzCgogICAgIyBBbGwgb3RoZXIgZW50cmllcyB3aWxsIGJlIHVzZWQgdG8gdmVyaWZ5IHNlc3Npb24gY29va2llcyB0aGF0IHdlcmUgc2lnbmVkIGJlZm9yZSAic29tZXRoaW5nLXN1cGVyLXNlY3JldCIgYmVjYW1lCiAgICAjIHRoZSBjdXJyZW50IHNpZ25pbmcgc2VjcmV0LgogICAgLSBvbGQtc2Vzc2lvbi1zZWNyZXQKICAgIC0gb2xkZXItc2Vzc2lvbi1zZWNyZXQKICAgIC0gYW5jaWVudC1zZXNzaW9uLXNlY3JldAoKc2VsZnNlcnZpY2U6CiAgcmVnaXN0cmF0aW9uOgogICAgYWZ0ZXI6CiAgICAgIDxzdHJhdGVneT46CiAgICAgICAgLSBqb2I6IHNlc3Npb24KICAgICAgICAgICMgY2FuIG5vdCBiZSBjb25maWd1cmVkCmApKSxtZHgoImJsb2NrcXVvdGUiLG51bGwsbWR4KCJwIix7cGFyZW50TmFtZToiYmxvY2txdW90ZSJ9LGBUaGlzIGpvYiBpcyByZXF1aXJlZCBmb3IgbG9naW4gdG8gd29yaywgb3RoZXJ3aXNlIG5vIHNlc3Npb24gd2lsbCBiZSBjcmVhdGVkLmApKSxtZHgoImgzIix7ImlkIjoicmVkaXJlY3QifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJoMyJ9LGByZWRpcmVjdGApKSxtZHgoInAiLG51bGwsYFRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgcmVkaXJlY3RgKSxgIGpvYiB3aWxsIHNlbmQgYSBIVFRQIDMwMiBGb3VuZCByZXNwb25zZSBhbmQgcmVkaXJlY3QgdGhlIGNsaWVudAp0byB0aGUgc3BlY2lmaWVkIGVuZHBvaW50LiBUaGVyZSBhcmUgdHdvIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhdmFpbGFibGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLGBzZWxmc2VydmljZToKICBsb2dpbjoKICAgIGFmdGVyOgogICAgICA8c3RyYXRlZ3k+OgogICAgICAgIC0gam9iOiByZWRpcmVjdAogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICAjIHJlZGlyZWN0X3RvIHNldHMgdGhlIFVSTCB0aGUgY2xpZW50IHdpbGwgYmUgcmVkaXJlY3RlZCB0by4KICAgICAgICAgICAgcmVkaXJlY3RfdG86IGh0dHBzOi8vdXJsLXRvLXJlZGlyZWN0L3RvCgogICAgICAgICAgICAjIGFsbG93X3VzZXJfZGVmaW5lZCwgaWYgZW5hYmxlZCwgd2lsbCBjaGVjayBmb3IgYSBcYD9yZXR1cm5fdG9cYCBxdWVyeSBwYXJhbWV0ZXIgaW4gdGhlIG9yaWdpbmFsIHJlcXVlc3QgVVJMLgogICAgICAgICAgICAjIElmIHRoZSBwYXJhbWV0ZXIgaXMgc2V0IGFuZCB0aGUgVVJMIGlzIHdoaXRlbGlzdGVkIGluIFxgdXJscy53aGl0ZWxpc3RlZF9yZXR1cm5fdG9fZG9tYWluc1xgCiAgICAgICAgICAgIGFsbG93X3VzZXJfZGVmaW5lZDogdHJ1ZQpgKSksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxgSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHNldCB1cCBhIHJlZGlyZWN0IGpvYiBhZnRlciBsb2dpbiwgb3RoZXJ3aXNlIHRoZQp1c2VyIG1pZ2h0IGdldCBzdHVjayBvbiBhbiBlbXB0eSwgd2hpdGUgc2NyZWVuLmApKSxtZHgoImgzIix7ImlkIjoicmV2b2tlX2FjdGl2ZV9zZXNzaW9ucyJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImgzIn0sYHJldm9rZV9hY3RpdmVfc2Vzc2lvbnNgKSksbWR4KCJwIixudWxsLGBUaGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYHJldm9rZV9hY3RpdmVfc2Vzc2lvbnNgKSxgIHdpbGwgZGVsZXRlIGFsbCBhY3RpdmUgc2Vzc2lvbnMgZm9yIHRoYXQgdXNlciBvbgpzdWNjZXNzZnVsIGxvZ2luOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UteWFtbCJ9KSxgc2VsZnNlcnZpY2U6CiAgbG9naW46CiAgICBhZnRlcjoKICAgICAgPHN0cmF0ZWd5PjoKICAgICAgICAtIGpvYjogcmV2b2tlX2FjdGl2ZV9zZXNzaW9ucwogICAgICAgICAgIyBjYW4gbm90IGJlIGNvbmZpZ3VyZWQKYCkpLG1keCgiaDIiLHsiaWQiOiJ1c2VyLXJlZ2lzdHJhdGlvbiJ9LGBVc2VyIFJlZ2lzdHJhdGlvbmApLG1keCgicCIsbnVsbCxgSm9icyBydW5uaW5nIGFmdGVyIHN1Y2Nlc3NmdWwgdXNlciByZWdpc3RyYXRpb24gY2FuIGJlIGRlZmluZWQgcGVyIFNlbGYtU2VydmljZQpSZWdpc3RyYXRpb24gU3RyYXRlZ3kgaW4gT1JZIEtyYXRvcycgY29uZmlndXJhdGlvbiBmaWxlLCBmb3IgZXhhbXBsZTpgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXlhbWwifSksYHNlbGZzZXJ2aWNlOgogIHJlZ2lzdHJhdGlvbjoKICAgIGFmdGVyOgogICAgICBwYXNzd29yZGxlc3M6CiAgICAgICAgLSBqb2I6IHJlZGlyZWN0CiAgICAgICAgICBjb25maWc6CiAgICAgICAgICAgIHJlZGlyZWN0X3RvOiBodHRwczovL3VybC10by1yZWRpcmVjdC90bwogICAgICBvaWRjOgogICAgICAgIC0gam9iOiByZWRpcmVjdAogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICByZWRpcmVjdF90bzogaHR0cHM6Ly91cmwtdG8tcmVkaXJlY3QvdG8KICAgICAgcGFzc3dvcmQ6CiAgICAgICAgLSBqb2I6IHJlZGlyZWN0CiAgICAgICAgICBjb25maWc6CiAgICAgICAgICAgIHJlZGlyZWN0X3RvOiBodHRwczovL3VybC10by1yZWRpcmVjdC90bwpgKSksbWR4KCJoMyIseyJpZCI6InNlc3Npb24tMSJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImgzIn0sYHNlc3Npb25gKSksbWR4KCJwIixudWxsLGBUaGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYHNlc3Npb25gKSxgIGpvYiB3aWxsIHNlbmQgYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgU2V0LUNvb2tpZWApLGAgaGVhZGVyIHdoaWNoIGNvbnRhaW5zIHRoZSBzZXNzaW9uCmNvb2tpZS4gVG8gdXNlIGl0LCB5b3UgbXVzdCBmaXJzdCBkZWZpbmUgb25lIG9yIG1vcmUgKGZvciBzZWNyZXQgcm90YXRpb24pCnNlc3Npb24gc2VjcmV0cyBhbmQgdGhlbiB1c2UgaXQgaW4gb25lIG9mIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYWZ0ZXJgKSxgIHdvcmsgZmxvd3M6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLGBzZWNyZXRzOgogIHNlc3Npb246CiAgICAtIHNvbWV0aGluZy1zdXBlci1zZWNyZXQgIyBUaGUgZmlyc3QgZW50cnkgd2lsbCBiZSB1c2VkIHRvIHNpZ24gYW5kIHZlcmlmeSBzZXNzaW9uIGNvb2tpZXMKCiAgICAjIEFsbCBvdGhlciBlbnRyaWVzIHdpbGwgYmUgdXNlZCB0byB2ZXJpZnkgc2Vzc2lvbiBjb29raWVzIHRoYXQgd2VyZSBzaWduZWQgYmVmb3JlICJzb21ldGhpbmctc3VwZXItc2VjcmV0IiBiZWNhbWUKICAgICMgdGhlIGN1cnJlbnQgc2lnbmluZyBzZWNyZXQuCiAgICAtIG9sZC1zZXNzaW9uLXNlY3JldAogICAgLSBvbGRlci1zZXNzaW9uLXNlY3JldAogICAgLSBhbmNpZW50LXNlc3Npb24tc2VjcmV0CgpzZWxmc2VydmljZToKICByZWdpc3RyYXRpb246CiAgICBhZnRlcjoKICAgICAgPHN0cmF0ZWd5PjoKICAgICAgICAtIGpvYjogc2Vzc2lvbgogICAgICAgICAgIyBjYW4gbm90IGJlIGNvbmZpZ3VyZWQKYCkpLG1keCgicCIsbnVsbCxgVGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBzZXNzaW9uYCksYCBqb2IgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHVzZXJzIHRvIGJlIHNpZ25lZCBpbiBpbW1lZGlhdGVseSBhZnRlcgpyZWdpc3RyYXRpb24sIHdpdGhvdXQgZnVydGhlciBhY2NvdW50IGFjdGl2YXRpb24gb3IgYW4gYWRkaXRpb25hbCBsb2dpbiBmbG93LmApLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sYFVzaW5nIHRoaXMgam9iIGFzIHBhcnQgb2YgeW91ciBwb3N0LXJlZ2lzdHJhdGlvbiB3b3JrZmxvdyBtYWtlcyB5b3VyIHN5c3RlbQp2dWxuZXJhYmxlIHRvCmAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Ii9rcmF0b3MvZG9jcy9uZXh0L2NvbmNlcHRzL3NlY3VyaXR5I2FjY291bnQtZW51bWVyYXRpb24tYXR0YWNrcyJ9KSxgQWNjb3VudCBFbnVtZXJhdGlvbiBBdHRhY2tzYCksYApiZWNhdXNlIGEgdGhyZWF0IGFnZW50IGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuIGV4aXN0aW5nIGFuZCBub24tZXhpc3RpbmcKYWNjb3VudHMgYnkgY2hlY2tpbmcgaWYgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYFNldC1Db29raWVgKSxgIHdhcyBzZW50IGFzIHBhcnQgb2YgdGhlIHJlZ2lzdHJhdGlvbgpyZXNwb25zZS5gKSksbWR4KCJoMyIseyJpZCI6InJlZGlyZWN0LTEifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJoMyJ9LGByZWRpcmVjdGApKSxtZHgoInAiLG51bGwsYFRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgcmVkaXJlY3RgKSxgIGpvYiB3aWxsIHNlbmQgYSBIVFRQIDMwMiBGb3VuZCByZXNwb25zZSBhbmQgcmVkaXJlY3QgdGhlIGNsaWVudAp0byB0aGUgc3BlY2lmaWVkIGVuZHBvaW50LiBUaGVyZSBhcmUgdHdvIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhdmFpbGFibGU6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS15YW1sIn0pLGBzZWxmc2VydmljZToKICByZWdpc3RyYXRpb246CiAgICBhZnRlcjoKICAgICAgPHN0cmF0ZWd5PjoKICAgICAgICAtIGpvYjogcmVkaXJlY3QKICAgICAgICAgIGNvbmZpZzoKICAgICAgICAgICAgIyByZWRpcmVjdF90byBzZXRzIHRoZSBVUkwgdGhlIGNsaWVudCB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8uCiAgICAgICAgICAgIHJlZGlyZWN0X3RvOiBodHRwczovL3VybC10by1yZWRpcmVjdC90bwoKICAgICAgICAgICAgIyBhbGxvd191c2VyX2RlZmluZWQsIGlmIGVuYWJsZWQsIHdpbGwgY2hlY2sgZm9yIGEgXGA/cmV0dXJuX3RvXGAgcXVlcnkgcGFyYW1ldGVyIGluIHRoZSBvcmlnaW5hbCByZXF1ZXN0IFVSTC4KICAgICAgICAgICAgIyBJZiB0aGUgcGFyYW1ldGVyIGlzIHNldCBhbmQgdGhlIFVSTCBpcyB3aGl0ZWxpc3RlZCBpbiBcYHVybHMud2hpdGVsaXN0ZWRfcmV0dXJuX3RvX2RvbWFpbnNcYAogICAgICAgICAgICBhbGxvd191c2VyX2RlZmluZWQ6IHRydWUKYCkpLG1keCgiYmxvY2txdW90ZSIsbnVsbCxtZHgoInAiLHtwYXJlbnROYW1lOiJibG9ja3F1b3RlIn0sYEl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byBzZXQgdXAgYSByZWRpcmVjdCBqb2IgYWZ0ZXIgcmVnaXN0cmF0aW9uLApvdGhlcndpc2UgdGhlIHVzZXIgbWlnaHQgZ2V0IHN0dWNrIG9uIGFuIGVtcHR5LCB3aGl0ZSBzY3JlZW4uYCkpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}