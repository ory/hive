{"remainingRequest":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/foobar/go/src/github.com/ory/kratos/docs/versioned_docs/version-v0.1/concepts/index.md","dependencies":[{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/versioned_docs/version-v0.1/concepts/index.md","mtime":1586512083236},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/.docusaurus/docusaurus-plugin-content-docs/site-versioned-docs-version-v-0-1-concepts-index-md-4b7.json","mtime":1586597735471},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/foobar/go/src/github.com/ory/kratos/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}