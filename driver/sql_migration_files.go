// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../contrib/sql/migrations/postgres/1.sql (1.742kB)
// ../contrib/sql/migrations/tests/1_test.sql (618B)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ContribSqlMigrationsPostgres1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdb\x6e\xda\x40\x10\x7d\xf7\x57\xcc\x9b\x6d\x95\x48\x55\xab\xf4\x21\x48\x95\x1c\x58\x1a\x2b\x60\xa8\xb1\xdb\xf0\x64\x6d\xed\x09\x6c\x31\xb6\xbb\xbb\xe4\xa2\xaa\xff\x5e\xf9\x86\xaf\x5c\xd2\xfa\x8d\xd5\x9c\xb3\xb3\x67\xce\x19\xae\xae\xe0\xdd\x8e\xad\x39\x95\x08\x6e\xa2\x8c\x6c\x62\x38\x04\x9c\xd5\x82\x80\xcf\x31\xc0\x48\x32\x1a\x0a\x4f\xbe\x26\x08\xc6\x12\x88\xe5\xce\x40\x53\x63\x16\xf8\xea\x00\xd4\x84\x0a\xf1\x1c\xf3\x40\xd5\x87\x0d\xa8\xc0\xf0\xd1\x13\xc8\x9f\x98\x8f\x1e\xc7\x5f\x7b\x14\xb2\xcd\x11\xc6\x6b\x16\xa5\x24\x1c\xd7\x4c\x48\x4e\x25\x8b\xa3\x94\xe8\xc0\x64\xdc\x4e\x09\x98\x13\xb0\xe6\x0e\x90\x07\x73\xe9\x2c\x81\x65\x1d\xc9\x57\x45\x53\x00\x00\x92\x2d\xb4\xbe\x5b\xf3\xcb\x92\xd8\xa6\x31\x85\x85\x6d\xce\x0c\x7b\x05\xf7\x64\x35\xc8\x8a\x59\xd0\x2e\xfe\x66\xd8\xa3\x3b\xc3\xd6\x3e\x5c\x5f\xeb\xd9\x2d\x96\x3b\x9d\x82\x6b\x99\x5f\x5d\x92\x63\x24\xa7\x4c\x8a\x3a\xe6\xa7\x88\xa3\x1f\xe5\x8f\x03\x66\x4c\x26\x86\x3b\x75\x40\xfd\xfd\x47\xbd\xb9\xc9\x6a\xea\x04\x9e\xf0\x37\xb8\xa3\xde\x9e\x87\x20\xf1\x45\x42\x9b\x40\xb9\xf0\xdd\x5e\x6d\x28\x3d\x1a\x9c\x7c\x7d\xc1\xc0\x82\xb4\xcc\xb4\x1c\xb0\xc9\x84\xd8\xc4\x1a\x91\x8a\x1f\xb4\x64\xab\xe7\x80\x1d\xca\x4d\x5c\x48\xd6\xb1\x42\xd9\x77\x5e\x1a\x27\xe9\xec\x44\x57\x9f\x73\x1a\xfd\xcb\xb3\xbd\xfc\xf0\x91\x21\xef\x93\xe0\x62\x33\xf4\x32\x9f\x90\xa6\x5e\x59\x93\xa9\xea\xe6\xad\xde\x1a\xdd\x91\xd1\x3d\x68\x21\x46\x6b\xb9\xd1\x2a\x1e\x1d\x3e\xc3\x7b\xfd\x9c\x34\x7d\x11\x3b\x22\xc7\x1b\x32\x51\x76\xfd\xf1\x93\xde\xd2\xb2\xf7\x09\xf8\x92\x30\x8e\xc2\xa3\x85\xa3\x1d\x73\x46\x96\x8e\x31\x5b\x74\x46\xd1\x34\x0c\x13\x62\x8f\xc1\x01\x76\x01\xee\xe0\x1e\x6b\xfe\x5d\x2b\xa4\x2f\x17\x4b\x9a\xaa\xf4\x6b\x24\xeb\xc4\xed\x25\x6e\x83\x34\x40\x2e\xba\x96\x3d\x7e\x7b\x27\xdf\xd4\x97\xec\x09\x2b\x44\x27\x29\x47\x7a\xc8\xd3\x55\x6d\x96\xff\xe9\x61\xcb\xa2\xc6\x18\x8f\x6f\xdf\xbe\x75\x93\xcf\x13\x4c\x6b\x4c\x1e\x20\xa2\x3b\x84\xb9\xd5\x4b\x01\x1a\x0b\x06\xd9\x65\x29\xba\xfe\xc7\x31\x8e\x9f\x23\x65\x6c\xcf\x17\x85\x53\xcf\xc5\x76\x78\xae\xb8\xb7\xa0\x71\xd8\xd7\xe0\x50\xf9\x1b\x00\x00\xff\xff\xd7\xd3\x37\x74\xce\x06\x00\x00")

func ContribSqlMigrationsPostgres1SqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsPostgres1Sql,
		"../contrib/sql/migrations/postgres/1.sql",
	)
}

func ContribSqlMigrationsPostgres1Sql() (*asset, error) {
	bytes, err := ContribSqlMigrationsPostgres1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/postgres/1.sql", size: 1742, mode: os.FileMode(0644), modTime: time.Unix(1565695422, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x91, 0xb, 0x26, 0xb3, 0x47, 0x85, 0x14, 0x21, 0xa4, 0x81, 0x13, 0x4, 0x8b, 0x40, 0xbf, 0x51, 0x9e, 0xa, 0x62, 0x35, 0x7b, 0x0, 0xc6, 0x8b, 0x95, 0x58, 0x51, 0x71, 0xda, 0xb0, 0x78}}
	return a, nil
}

var _ContribSqlMigrationsTests1_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x41\x4f\xc2\x40\x10\x85\xef\xfd\x15\x73\x5b\x88\x0b\x84\xab\x5e\x34\x91\x03\x89\x81\x44\x40\x8f\x9b\x4d\x77\xa0\x13\xdb\x6e\x9d\x19\x28\xc4\xf8\xdf\x4d\x01\xa1\x8d\x1e\xbc\x79\xea\xf4\xe5\xe5\x7b\x99\x79\x3b\x18\xc0\x4d\x41\x1b\xf6\x8a\xb0\xaa\x92\xe9\x6c\x31\x79\x5e\xc2\x74\xb6\x9c\x03\x05\x2c\x95\xf4\x00\x3d\x0a\x16\x94\x3d\xa9\x38\x49\x33\x2c\xbc\xdb\x72\xde\x4f\x5e\x1e\x9e\x56\x93\x05\xf4\x4c\xf0\xea\x07\x63\x63\xc1\xac\x63\x34\xfd\xbb\xe4\x57\x8e\x4b\x19\x8f\xa3\xcf\xa5\x61\x9e\xd5\x06\x5e\xa0\x66\x31\x5c\x89\x63\x0b\xa6\xf2\x22\x75\xe4\xf0\x27\x9e\x3b\x89\x6b\x42\x6e\xb3\xbb\x0e\x0b\x57\x57\x37\xeb\xb4\xc0\x3d\xee\x7d\x51\xe5\x38\x8c\xbc\xf9\x87\xd4\x34\x16\x3f\x52\x05\xf3\xb5\x13\xe4\x1d\xa5\xe8\x18\xdf\xb7\x28\x7a\xea\x03\xf7\x15\x31\x8a\xf3\x6a\x81\x44\xb6\x18\x8e\xe3\xd9\xd3\x14\x74\xfd\xc9\xd0\x07\x64\xb1\xe0\x53\xa5\x1d\x7e\xdf\x5b\x2c\xbc\x51\xd9\x3d\xfb\x6c\xfe\xda\xeb\x5f\x3e\x26\x53\xad\xe4\x76\x34\xaa\xeb\x7a\x18\xf9\x30\x94\x6c\xd4\xd4\xfc\xf1\x69\xda\x0d\xc1\x45\xca\xe3\x86\xca\xe3\x16\xed\x87\xf5\x18\xeb\x32\xf9\x0a\x00\x00\xff\xff\xd5\xed\xfe\xe1\x6a\x02\x00\x00")

func ContribSqlMigrationsTests1_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsTests1_testSql,
		"../contrib/sql/migrations/tests/1_test.sql",
	)
}

func ContribSqlMigrationsTests1_testSql() (*asset, error) {
	bytes, err := ContribSqlMigrationsTests1_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/tests/1_test.sql", size: 618, mode: os.FileMode(0644), modTime: time.Unix(1565687935, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xfc, 0xb1, 0xb7, 0x86, 0xf3, 0x5e, 0x27, 0x45, 0xd3, 0xea, 0x82, 0x8b, 0xf, 0x74, 0x38, 0x93, 0x40, 0x7, 0xc6, 0x7d, 0xf5, 0xa5, 0xe1, 0xd1, 0xe3, 0x1a, 0x77, 0x26, 0xd1, 0xcf, 0x24}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../contrib/sql/migrations/postgres/1.sql": ContribSqlMigrationsPostgres1Sql,

	"../contrib/sql/migrations/tests/1_test.sql": ContribSqlMigrationsTests1_testSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"contrib": &bintree{nil, map[string]*bintree{
			"sql": &bintree{nil, map[string]*bintree{
				"migrations": &bintree{nil, map[string]*bintree{
					"postgres": &bintree{nil, map[string]*bintree{
						"1.sql": &bintree{ContribSqlMigrationsPostgres1Sql, map[string]*bintree{}},
					}},
					"tests": &bintree{nil, map[string]*bintree{
						"1_test.sql": &bintree{ContribSqlMigrationsTests1_testSql, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
