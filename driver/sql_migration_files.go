// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../contrib/sql/migrations/postgres/1.sql (2.193kB)
// ../contrib/sql/migrations/tests/1_test.sql (618B)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ContribSqlMigrationsPostgres1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x8f\x9a\x5e\x10\x7d\xe7\xaf\x98\x37\x20\xbf\xdd\xe4\x97\x36\xdb\x87\x35\x69\xc2\xc2\xb5\x92\x45\xb4\x7c\x74\xd7\xbe\x90\x5b\x98\xd5\x5b\x15\xe8\xbd\xd7\xfd\x48\xd3\xff\xbd\x01\xfc\x40\x44\xc5\xad\x4f\x62\xce\x39\xce\x9c\x39\x33\x5c\x5f\xc3\x7f\x4b\x36\xe5\x54\x22\x84\xb9\x62\x7a\xc4\x08\x08\x04\x93\x31\x81\x98\x63\x82\xa9\x64\x74\x21\x22\xf9\x96\x23\x18\x3e\x10\x37\x1c\x82\xa6\x66\x2c\x89\xd5\x2b\x50\x73\x2a\xc4\x4b\xc6\x13\x55\xef\xed\x51\x05\x2e\x9e\x22\x81\xfc\x99\xc5\x18\x71\xfc\xb5\x42\x21\x9b\x1a\x8b\x6c\xca\xd2\x42\x84\xe3\x94\x09\xc9\xa9\x64\x59\x5a\x08\x6d\x95\x8c\x3b\x87\x80\xdd\x07\x77\x14\x00\x79\xb4\xfd\xc0\x07\x56\x56\x24\xdf\x14\x4d\x01\x00\xc8\xe7\xd0\xf8\xdc\xd9\x5f\x7c\xe2\xd9\x86\x03\x63\xcf\x1e\x1a\xde\x04\xee\xc9\xe4\xaa\x04\xb3\xa4\x09\xfe\x66\x78\xe6\xc0\xf0\xb4\x0f\x37\x37\x7a\xf9\x2f\x6e\xe8\x38\x10\xba\xf6\xd7\x90\x54\x1c\xc9\x29\x93\xa2\xce\xf9\x29\xb2\xf4\xc7\xe6\x61\xcb\xb1\x48\xdf\x08\x9d\x00\xd4\xdf\x7f\xd4\xdb\xdb\x12\x53\x17\x88\x44\x3c\xc3\x25\x8d\x56\x7c\x01\x12\x5f\x25\x34\x05\x94\x8e\x7d\x47\xb5\xa1\xb4\x78\x70\xb2\xfb\xb5\x42\x3e\x2f\x60\xb6\x1b\x80\x47\xfa\xc4\x23\xae\x49\x76\xfa\xa0\xe5\x73\x1d\x46\x2e\x58\xc4\x21\x01\x01\xd3\xf0\x4d\xc3\x5a\x9b\xb1\x44\x39\xcb\xd6\x26\x1e\x84\x63\xd3\x49\x05\xcd\xf2\x62\x9a\xe2\xd0\xb1\x73\xae\xbd\xc7\x88\x28\x9f\x17\xdf\x9e\x18\xf2\x36\x53\x3a\xc7\xa3\x55\xf9\x84\x59\x75\xe4\x49\xe3\x2a\x42\x51\xdf\xa5\xf9\x33\x07\xc4\xbc\x07\x6d\x81\xe9\x54\xce\xb4\x9d\x8e\x0e\x9f\xe1\x7f\xfd\x9c\x59\x6d\x6b\x78\xc4\xa0\x0b\xf6\x66\x53\xf5\xc7\x4f\x7a\xc3\xdd\xd6\x16\xf0\x35\x67\x1c\x45\x44\xd7\xa9\x0f\xec\x21\xf1\x03\x63\x38\x86\x07\x3b\x18\x94\x8f\xf0\x7d\xe4\x12\x68\x44\x88\x09\xb1\xc2\x64\x4b\xeb\xc0\xdb\xe6\xc9\x1d\x3d\x68\x7a\xa5\xb2\x39\x3e\xc5\xe6\x95\xfb\x58\xdf\xbe\xd6\xe2\xf7\x79\x33\xa4\x09\x72\x71\x18\xe2\x4e\x69\xae\xb4\x68\x2c\xd9\x33\xee\x18\x07\xbb\x73\xa4\x86\x6a\xdf\x76\xd7\xe7\x5f\x6a\x98\xb3\x74\x6f\x8c\xc7\x2f\x74\xd7\x93\x24\x50\x08\x96\xa5\xc7\x16\xee\x44\xa0\x44\xe7\x44\x75\x0a\xd4\xf1\x64\x9c\x0e\xd4\x79\x5e\x5b\xa0\xe8\x4a\xce\x8a\xe1\xc5\x54\x56\x62\xef\x52\xa9\x5f\xe3\x8d\x5d\x97\x9d\xe4\xfa\x78\x2a\x77\xc0\x76\x2d\xf2\x08\x29\x5d\x62\x01\x6f\x9b\x30\x68\x2c\xb9\x2a\xb3\x50\xb0\xeb\xef\x7e\x2b\x7b\x49\x15\xcb\x1b\x8d\xd7\xb3\x3e\x77\x67\x7b\xe7\xc0\xad\x80\xbd\x1f\xdb\x0a\xec\x29\x7f\x03\x00\x00\xff\xff\x29\x8f\xe0\xec\x91\x08\x00\x00")

func ContribSqlMigrationsPostgres1SqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsPostgres1Sql,
		"../contrib/sql/migrations/postgres/1.sql",
	)
}

func ContribSqlMigrationsPostgres1Sql() (*asset, error) {
	bytes, err := ContribSqlMigrationsPostgres1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/postgres/1.sql", size: 2193, mode: os.FileMode(0644), modTime: time.Unix(1565706593, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xe3, 0xea, 0xcb, 0x4b, 0xf3, 0x8e, 0xe4, 0x11, 0xe6, 0x13, 0xe1, 0x32, 0xa2, 0x86, 0xf0, 0x2a, 0x8f, 0xd, 0x5e, 0x8a, 0x95, 0xc7, 0xc2, 0x46, 0xa7, 0x32, 0x9a, 0x54, 0xbe, 0x27, 0x30}}
	return a, nil
}

var _ContribSqlMigrationsTests1_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x41\x4f\xc2\x40\x10\x85\xef\xfd\x15\x73\x5b\x88\x0b\x84\xab\x5e\x34\x91\x03\x89\x81\x44\x40\x8f\x9b\x4d\x77\xa0\x13\xdb\x6e\x9d\x19\x28\xc4\xf8\xdf\x4d\x01\xa1\x8d\x1e\xbc\x79\xea\xf4\xe5\xe5\x7b\x99\x79\x3b\x18\xc0\x4d\x41\x1b\xf6\x8a\xb0\xaa\x92\xe9\x6c\x31\x79\x5e\xc2\x74\xb6\x9c\x03\x05\x2c\x95\xf4\x00\x3d\x0a\x16\x94\x3d\xa9\x38\x49\x33\x2c\xbc\xdb\x72\xde\x4f\x5e\x1e\x9e\x56\x93\x05\xf4\x4c\xf0\xea\x07\x63\x63\xc1\xac\x63\x34\xfd\xbb\xe4\x57\x8e\x4b\x19\x8f\xa3\xcf\xa5\x61\x9e\xd5\x06\x5e\xa0\x66\x31\x5c\x89\x63\x0b\xa6\xf2\x22\x75\xe4\xf0\x27\x9e\x3b\x89\x6b\x42\x6e\xb3\xbb\x0e\x0b\x57\x57\x37\xeb\xb4\xc0\x3d\xee\x7d\x51\xe5\x38\x8c\xbc\xf9\x87\xd4\x34\x16\x3f\x52\x05\xf3\xb5\x13\xe4\x1d\xa5\xe8\x18\xdf\xb7\x28\x7a\xea\x03\xf7\x15\x31\x8a\xf3\x6a\x81\x44\xb6\x18\x8e\xe3\xd9\xd3\x14\x74\xfd\xc9\xd0\x07\x64\xb1\xe0\x53\xa5\x1d\x7e\xdf\x5b\x2c\xbc\x51\xd9\x3d\xfb\x6c\xfe\xda\xeb\x5f\x3e\x26\x53\xad\xe4\x76\x34\xaa\xeb\x7a\x18\xf9\x30\x94\x6c\xd4\xd4\xfc\xf1\x69\xda\x0d\xc1\x45\xca\xe3\x86\xca\xe3\x16\xed\x87\xf5\x18\xeb\x32\xf9\x0a\x00\x00\xff\xff\xd5\xed\xfe\xe1\x6a\x02\x00\x00")

func ContribSqlMigrationsTests1_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsTests1_testSql,
		"../contrib/sql/migrations/tests/1_test.sql",
	)
}

func ContribSqlMigrationsTests1_testSql() (*asset, error) {
	bytes, err := ContribSqlMigrationsTests1_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/tests/1_test.sql", size: 618, mode: os.FileMode(0644), modTime: time.Unix(1565703433, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xfc, 0xb1, 0xb7, 0x86, 0xf3, 0x5e, 0x27, 0x45, 0xd3, 0xea, 0x82, 0x8b, 0xf, 0x74, 0x38, 0x93, 0x40, 0x7, 0xc6, 0x7d, 0xf5, 0xa5, 0xe1, 0xd1, 0xe3, 0x1a, 0x77, 0x26, 0xd1, 0xcf, 0x24}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../contrib/sql/migrations/postgres/1.sql": ContribSqlMigrationsPostgres1Sql,

	"../contrib/sql/migrations/tests/1_test.sql": ContribSqlMigrationsTests1_testSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"contrib": &bintree{nil, map[string]*bintree{
			"sql": &bintree{nil, map[string]*bintree{
				"migrations": &bintree{nil, map[string]*bintree{
					"postgres": &bintree{nil, map[string]*bintree{
						"1.sql": &bintree{ContribSqlMigrationsPostgres1Sql, map[string]*bintree{}},
					}},
					"tests": &bintree{nil, map[string]*bintree{
						"1_test.sql": &bintree{ContribSqlMigrationsTests1_testSql, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
