// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../contrib/sql/migrations/postgres/1.sql (2.373kB)
// ../contrib/sql/migrations/tests/1_test.sql (760B)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ContribSqlMigrationsPostgres1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5b\x6f\x9b\x4c\x10\x7d\xf7\xaf\x98\x37\x40\x5f\x22\x7d\x6a\x95\x3e\x24\x52\x25\x02\xeb\x1a\x05\x63\x97\x4b\x13\xf7\x05\x6d\x61\x6d\x6f\x6d\x03\xdd\x5d\xe7\xa2\xaa\xff\xbd\xe2\x66\x30\x06\x8c\x53\xbf\x61\xce\x9c\x99\x3d\x73\x66\xd8\xeb\x6b\xf8\x6f\x47\x57\x0c\x0b\x02\x5e\x32\xd2\xed\xd9\x1c\xdc\xc5\x1c\x81\x31\x06\xf4\x64\x38\xae\x03\x01\x23\x21\x89\x04\xc5\x5b\xee\x8b\xb7\x84\xdc\x8d\x34\x1b\xa9\x2e\xca\x71\xcd\xb7\xa0\x3a\x80\x2c\x6f\x0a\xb2\x14\xd3\x30\x90\xae\x40\x4a\x30\xe7\x2f\x31\x0b\x25\xe5\xae\x35\x01\x27\xdb\xa5\xcf\x09\x7b\xa6\x01\xf1\x19\xf9\xb5\x27\x5c\xb4\x64\xea\x84\xd5\x52\x6e\xe3\x15\x8d\xd2\x9c\x8c\xac\x28\x17\x0c\x0b\x1a\x47\x69\xde\x03\x93\x7a\x6f\x66\xb9\xad\x99\x5b\xe6\xa7\xd9\x01\xc4\xdb\x48\x1e\x01\x00\x24\x1b\x68\xfc\xee\x8d\x2f\x0e\xb2\x0d\xd5\x84\xb9\x6d\x4c\x55\x7b\x01\x0f\x68\x71\x95\x81\x69\xd8\x04\x7f\x53\x6d\x6d\xa2\xda\xf2\x87\x9b\x1b\x25\xcb\x62\x79\xa6\x09\x9e\x65\x7c\xf5\x50\x1e\x23\x18\xa6\x82\xd7\x63\x7e\xf2\x38\xfa\x51\x3e\x1c\x62\x74\x34\x56\x3d\xd3\x05\xe9\xf7\x1f\xe9\xf6\x36\xc3\xd4\x09\x7c\x1e\xac\xc9\x0e\xfb\x7b\xb6\x05\x41\x5e\x05\x34\x09\x46\x03\xcf\xed\x57\x3d\x6c\x91\xa0\xf7\xf0\x05\x41\xb2\x49\x61\x86\xe5\x82\x8d\xc6\xc8\x46\x96\x86\x2a\x7a\x90\x93\x8d\x02\x33\x0b\x74\x64\x22\x17\x81\xa6\x3a\x9a\xaa\x17\x5a\xec\x88\x58\xc7\x85\x86\x27\x56\x2a\x0f\x92\x43\x83\x38\x5a\xd2\x55\x8b\x60\xe7\x44\x7b\x87\x0e\x7e\xfe\xdf\x92\x12\xd6\xe9\x8a\xc1\xea\xd4\x68\x7b\x85\xaa\x01\x7b\x35\xab\x6a\xbb\xd0\x78\xda\x04\x69\x0f\x20\x6f\x49\xb4\x12\x6b\xb9\xa2\x51\xe0\x33\xfc\xaf\x9c\x93\xa9\x6d\xfe\x3a\xc4\xb9\x60\x60\xca\xaa\x3f\x7e\x52\x1a\xd2\xb6\x1e\x81\xbc\x26\x94\x11\xee\xe3\xc2\xee\xae\x31\x45\x8e\xab\x4e\xe7\xf0\x68\xb8\x93\xec\x11\xbe\xcf\x2c\x04\x0d\xf3\x50\xce\xf7\x24\x3c\x84\x0d\x88\x3b\x38\xc9\x9a\x3d\xca\x4a\xce\x52\x6e\x9d\x74\xe4\xb2\x41\xac\x8f\x5d\x6b\xf1\xc7\x71\x6b\x82\x43\xc2\xf8\xa9\x7d\x07\xf9\x38\xe7\xc2\x81\xa0\xcf\xa4\x8a\x38\x99\x9a\x8e\x1a\xf2\x49\xab\xd6\xce\xbf\xd4\xb0\xa1\xd1\x51\x1b\xbb\x57\xf3\xd0\x5d\xc4\x09\xe7\x34\x8e\xba\x86\xad\xc7\x50\x7c\xb0\xa3\x06\x19\xaa\xdb\x19\xfd\x86\x3a\x1f\xd7\x66\x28\xbc\x17\xeb\xb4\x79\x01\x16\x39\xd9\xbb\x58\xea\x7b\xb8\x94\xeb\xb2\x65\x5c\x6f\x4f\xae\x0e\x18\x96\x8e\x9e\x20\xc2\x3b\x92\xc2\xdb\x3a\x0c\x32\x0d\xaf\x32\x2f\xa4\xd1\xf5\x9b\x84\x1e\xbf\x44\xc5\xa7\x3e\xeb\x75\xff\x86\xbd\x3b\x03\x3d\x7a\x5f\x18\xa5\x35\xa6\x01\x3c\xad\xb8\xfd\xfe\x71\x7a\xc1\xb9\xf0\x96\xf2\x37\x00\x00\xff\xff\x40\xe3\x70\x91\x45\x09\x00\x00")

func ContribSqlMigrationsPostgres1SqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsPostgres1Sql,
		"../contrib/sql/migrations/postgres/1.sql",
	)
}

func ContribSqlMigrationsPostgres1Sql() (*asset, error) {
	bytes, err := ContribSqlMigrationsPostgres1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/postgres/1.sql", size: 2373, mode: os.FileMode(0644), modTime: time.Unix(1565948073, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0xd2, 0x61, 0xf4, 0x43, 0x87, 0xe3, 0xc1, 0xcb, 0xf0, 0xc4, 0x28, 0x25, 0x12, 0xb5, 0xe8, 0xab, 0xac, 0xe3, 0xc1, 0x3e, 0x8b, 0x32, 0x71, 0xdd, 0x43, 0x11, 0xb2, 0xed, 0x4b, 0xc, 0x7c}}
	return a, nil
}

var _ContribSqlMigrationsTests1_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\xc1\x6e\xea\x30\x10\xbc\xe7\x2b\x56\xb9\x24\xe8\x19\x10\x57\xde\xe5\x3d\xa9\x1c\x90\x2a\x90\x0a\xb4\xc7\xc8\xb5\x37\xc9\x8a\x24\x4e\xbd\x0e\x01\x55\xfc\x7b\x95\x90\x36\xa1\x45\x55\x4f\x3d\xed\x7a\xb4\x9a\xd9\xf5\xcc\x78\x0c\x7f\x72\x4a\xac\x74\x08\xbb\xd2\x5b\xae\x36\x8b\x87\x2d\x2c\x57\xdb\x35\x90\xc6\xc2\x91\x3b\x41\x48\x5a\x80\xb3\x92\x1c\x47\xac\x52\xcc\x65\x54\xd9\x6c\xe4\x3d\xfe\xbf\xdf\x2d\x36\x10\x06\x5a\x3a\x39\x9e\x05\x02\x82\xd8\x98\x60\xf4\xd7\xbb\xc9\x13\x29\x8b\x6d\x2b\xb3\x86\xb2\x03\xcb\xbd\x80\x1c\x5d\x6a\xb4\x00\x65\x8a\x98\x92\x9e\x78\x26\x20\x28\x25\x73\x6d\xac\x6e\xd8\x5f\xfd\xd8\x18\x7f\xee\x3f\x4b\xeb\x9f\x7f\xa2\xc3\xd1\x05\x8c\x09\xed\x40\xb3\x1f\x68\xe5\xfb\x99\x6b\xe9\xcb\x59\xff\xf0\x28\xf3\x32\xc3\x89\xb1\xc9\xaf\x6b\x2a\x93\x7f\xd1\x64\xcc\xe2\x88\xd1\x1e\x48\x61\x64\xf1\xa5\x42\x76\x17\x8f\xf0\x58\x92\x45\x8e\xa4\x13\x40\xcc\x15\xea\xb6\xed\x66\x1a\xd3\xfa\x47\x8a\x52\xa3\x65\x01\x52\x39\x3a\xe0\xbb\x09\x2c\x60\x4f\x85\xbe\x5a\x6a\xb5\x7e\x0a\x47\x1f\x25\x48\x9d\x2b\x79\x3e\x9d\xd6\x75\x3d\x31\xf6\x34\xe1\x74\xda\x9a\x73\x0e\x3e\xdb\xd5\x22\x99\x49\xa8\xb8\x71\x04\x33\x99\x02\x42\xfe\x66\x71\x59\xb9\xb4\xf9\x26\x25\x5d\x87\x0c\x62\x33\xc8\x1f\x93\x6e\xe3\x77\xbd\x68\x57\x66\x8d\xf4\x30\xe6\x77\xa6\x2e\xbc\xb7\x00\x00\x00\xff\xff\xe1\xee\x49\xf1\xf8\x02\x00\x00")

func ContribSqlMigrationsTests1_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsTests1_testSql,
		"../contrib/sql/migrations/tests/1_test.sql",
	)
}

func ContribSqlMigrationsTests1_testSql() (*asset, error) {
	bytes, err := ContribSqlMigrationsTests1_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/tests/1_test.sql", size: 760, mode: os.FileMode(0644), modTime: time.Unix(1565879106, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x6a, 0x87, 0x24, 0x5d, 0xd, 0x92, 0xf0, 0x60, 0xa8, 0xcd, 0x0, 0xb5, 0x14, 0x6f, 0x3a, 0xcd, 0x43, 0x42, 0x51, 0x4b, 0x3d, 0xfb, 0x95, 0x71, 0xbf, 0x7c, 0xae, 0xb9, 0xf2, 0xe8, 0x74}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../contrib/sql/migrations/postgres/1.sql": ContribSqlMigrationsPostgres1Sql,

	"../contrib/sql/migrations/tests/1_test.sql": ContribSqlMigrationsTests1_testSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"contrib": &bintree{nil, map[string]*bintree{
			"sql": &bintree{nil, map[string]*bintree{
				"migrations": &bintree{nil, map[string]*bintree{
					"postgres": &bintree{nil, map[string]*bintree{
						"1.sql": &bintree{ContribSqlMigrationsPostgres1Sql, map[string]*bintree{}},
					}},
					"tests": &bintree{nil, map[string]*bintree{
						"1_test.sql": &bintree{ContribSqlMigrationsTests1_testSql, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
